package handlers

import (
	"TgDonation/internal/database/models"
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/looplab/fsm"
	tele "gopkg.in/telebot.v4"
)

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
func (h *Handler) onPanel(c tele.Context) error {
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
	}

	menu := &tele.ReplyMarkup{}
	GoalsBtn := menu.Data("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:", "goals_panel")
	StatisticBtn := menu.Data("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistic_panel")
	BroadcastBtn := menu.Data("–†–∞—Å—Å—ã–ª–∫–∞", "broadcast_panel")

	menu.Inline(
		menu.Row(GoalsBtn, StatisticBtn),
		menu.Row(BroadcastBtn),
	)

	return c.Send("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", menu)
}

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
func (h *Handler) onBackToPanel(c tele.Context) error {
	// –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
	if c.Callback() != nil && c.Callback().Message != nil {
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
	return h.onPanel(c)
}

func (h *Handler) onGoalsPanel(c tele.Context) error {
	h.tryDeleteMessage(c)
	menu := &tele.ReplyMarkup{}
	AddGoal := menu.Data("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", "add_goal")
	ListGoal := menu.Data("–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π", "list_goal")
	EditGoal := menu.Data("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å", "edit_goal")
	DeleteGoal := menu.Data("–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", "delete_goal")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	menu.Inline(
		menu.Row(AddGoal, ListGoal),
		menu.Row(EditGoal, DeleteGoal),
		menu.Row(BackBtn),
	)

	return c.Send("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:", menu)
}

func (h *Handler) onStatisticPanel(c tele.Context) error {
	h.tryDeleteMessage(c)
	menu := &tele.ReplyMarkup{}
	Statistic := menu.Data("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistic")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	menu.Inline(
		menu.Row(Statistic),
		menu.Row(BackBtn),
	)

	return c.Send("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", menu)

}

func (h *Handler) onStatistic(c tele.Context) error {
	h.tryDeleteMessage(c)

	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	var totalDonations float64
	var donationsCount int64
	var activeGoalsCount int64
	var topGoal models.Goal

	// –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
	if err := h.DB.Model(&models.Donation{}).Select("COALESCE(SUM(amount),0)").Scan(&totalDonations).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
	if err := h.DB.Model(&models.Donation{}).Count(&donationsCount).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	// –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
	var avgDonation float64
	if donationsCount > 0 {
		avgDonation = totalDonations / float64(donationsCount)
	}

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
	if err := h.DB.Model(&models.Goal{}).Where("status = ?", "active").Count(&activeGoalsCount).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	// –¶–µ–ª—å —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
	// –ï—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if err := h.DB.Order("current_sum DESC").First(&topGoal).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø-—Ü–µ–ª–∏: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–π - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
	report := "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
	report += fmt.Sprintf("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: <b>%.2f</b>\n", totalDonations)
	report += fmt.Sprintf("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: <b>%d</b>\n", donationsCount)
	report += fmt.Sprintf("üí≤ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: <b>%.2f</b>\n", avgDonation)
	report += fmt.Sprintf("üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: <b>%d</b>\n", activeGoalsCount)

	if topGoal.ID != 0 {
		report += fmt.Sprintf("üèÜ –¢–æ–ø —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä—É: <b>%s</b> (%.2f –∏–∑ %.2f)\n", topGoal.Title, topGoal.CurrentSum, topGoal.TargetSum)
	} else {
		report += "üèÜ –¢–æ–ø —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä—É: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª—è—Ö\n"
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))

	return c.Send(report, back, tele.ModeHTML)
}

// –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
func (h *Handler) AddGoalHandler(c tele.Context) error {
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	h.resetFSM(c.Sender().ID)
	fsm := h.getOrCreateAdminFSM(c.Sender().ID)
	h.UserData[c.Sender().ID] = map[string]interface{}{
		"action": "add_goal",
		"mode":   "admin",
	}

	if err := fsm.Event(context.Background(), "add_goal_title"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
}

func (h *Handler) processGoalTitle(c tele.Context, fsm *fsm.FSM) error {
	title := c.Text()
	if len(title) == 0 {
		return c.Send("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
	h.UserData[c.Sender().ID]["title"] = title
	if err := fsm.Event(context.Background(), "add_goal_description"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
}

func (h *Handler) processGoalDescription(c tele.Context, fsm *fsm.FSM) error {
	description := c.Text()
	if len(description) == 0 {
		return c.Send("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
	h.UserData[c.Sender().ID]["description"] = description
	if err := fsm.Event(context.Background(), "add_goal_target_sum"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):")
}

func (h *Handler) processGoalTargetSum(c tele.Context, fsm *fsm.FSM) error {
	targetSum, err := strconv.ParseFloat(c.Text(), 64)
	if err != nil || targetSum <= 0 {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
	}
	h.UserData[c.Sender().ID]["target_sum"] = targetSum

	menu := &tele.ReplyMarkup{}
	btnLow := menu.Data("üîµ –ù–∏–∑–∫–∏–π", "priority_low", "low")
	btnMedium := menu.Data("üü† –°—Ä–µ–¥–Ω–∏–π", "priority_medium", "medium")
	btnHigh := menu.Data("üî¥ –í—ã—Å–æ–∫–∏–π", "priority_high", "high")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	menu.Inline(
		menu.Row(btnLow, btnMedium, btnHigh),
		menu.Row(BackBtn),
	)

	if err := fsm.Event(context.Background(), "finish_goal"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏:", menu)
}

func (h *Handler) SetPriorityHandler(c tele.Context) error {
	action, ok := h.UserData[c.Sender().ID]["action"]
	if !ok || action != "add_goal" {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	priority := c.Callback().Data
	if priority != "low" && priority != "medium" && priority != "high" {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
	h.UserData[c.Sender().ID]["priority"] = priority

	title, _ := h.UserData[c.Sender().ID]["title"].(string)
	description, _ := h.UserData[c.Sender().ID]["description"].(string)
	targetSum, _ := h.UserData[c.Sender().ID]["target_sum"].(float64)

	goal := models.Goal{
		Title:       title,
		Description: description,
		TargetSum:   targetSum,
		CurrentSum:  0,
		Status:      "active",
		Priority:    priority,
		AdminID:     uint(c.Sender().ID),
	}

	if err := h.DB.Create(&goal).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))

	delete(h.UserData, c.Sender().ID)
	h.resetFSM(c.Sender().ID)
	return c.Send("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
}

func (h *Handler) onListGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))

	if len(goals) == 0 {
		return c.Send("–¶–µ–ª–µ–π –Ω–µ—Ç.", back)
	}

	message := "üéØ <b>–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π:</b>\n\n"
	for i, g := range goals {
		progress := 0.0
		if g.TargetSum > 0 {
			progress = (g.CurrentSum / g.TargetSum) * 100
		}
		message += fmt.Sprintf("%d. <b>%s</b> (ID: %d)\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°–æ–±—Ä–∞–Ω–æ: %.2f –∏–∑ %.2f (%.2f%%)\n–°—Ç–∞—Ç—É—Å: %s\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s\n\n",
			i+1, g.Title, g.ID, g.Description, g.CurrentSum, g.TargetSum, progress, g.Status, g.Priority)
	}

	return c.Send(message, back, tele.ModeHTML)
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π
func (h *Handler) onEditGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	h.resetFSM(c.Sender().ID)
	fsm := h.getOrCreateAdminFSM(c.Sender().ID)
	h.UserData[c.Sender().ID] = map[string]interface{}{
		"mode":   "admin",
		"action": "edit_goal",
	}

	if err := fsm.Event(context.Background(), "go_edit_goal_select"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	if len(goals) == 0 {
		back.Inline(back.Row(BackBtn))
		return c.Send("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", back)
	}

	menu := &tele.ReplyMarkup{}
	rows := []tele.Row{}
	for _, g := range goals {
		btn := menu.Data(fmt.Sprintf("%s (ID:%d)", g.Title, g.ID), "edit_goal_select", strconv.Itoa(int(g.ID)))
		rows = append(rows, menu.Row(btn))
	}
	menu.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", menu)
}

func (h *Handler) onEditGoalSelect(c tele.Context) error {
	goalIDStr := c.Callback().Data
	goalID, err := strconv.Atoi(goalIDStr)
	if err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ü–µ–ª–∏", ShowAlert: true})
	}

	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	adminFSM := h.getOrCreateAdminFSM(c.Sender().ID)
	if err := adminFSM.Event(context.Background(), "go_edit_goal_field"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	h.UserData[c.Sender().ID]["goalID"] = goalID

	menu := &tele.ReplyMarkup{}
	btnTitle := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "edit_field", "title")
	btnDesc := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "edit_field", "description")
	btnSum := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É", "edit_field", "target_sum")
	btnPriority := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "edit_field", "priority")
	btnStatus := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "edit_field", "status")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	menu.Inline(
		menu.Row(btnTitle),
		menu.Row(btnDesc),
		menu.Row(btnSum),
		menu.Row(btnPriority),
		menu.Row(btnStatus),
		menu.Row(BackBtn),
	)

	return c.Edit(fmt.Sprintf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: <b>%s</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", goal.Title), menu, tele.ModeHTML)
}

func (h *Handler) onEditField(c tele.Context) error {

	field := c.Callback().Data
	h.UserData[c.Sender().ID]["edit_field"] = field

	adminFSM := h.getOrCreateAdminFSM(c.Sender().ID)

	if field == "title" || field == "description" || field == "target_sum" {
		if err := adminFSM.Event(context.Background(), "wait_input"); err != nil {
			log.Printf("FSM Event Error: %v", err)
			h.resetFSM(c.Sender().ID)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
		h.UserData[c.Sender().ID]["await_input"] = true
		return c.Respond(&tele.CallbackResponse{Text: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∞—Ç"})
	}

	if field == "priority" {
		menu := &tele.ReplyMarkup{}
		btnLow := menu.Data("üîµ –ù–∏–∑–∫–∏–π", "edit_priority_select", "low")
		btnMedium := menu.Data("üü† –°—Ä–µ–¥–Ω–∏–π", "edit_priority_select", "medium")
		btnHigh := menu.Data("üî¥ –í—ã—Å–æ–∫–∏–π", "edit_priority_select", "high")
		BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

		menu.Inline(
			menu.Row(btnLow, btnMedium, btnHigh),
			menu.Row(BackBtn),
		)
		return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", menu)
	} else if field == "status" {
		menu := &tele.ReplyMarkup{}
		btnActive := menu.Data("–ê–∫—Ç–∏–≤–Ω–∞", "edit_status_select", "active")
		btnInactive := menu.Data("–ù–µ–∞–∫—Ç–∏–≤–Ω–∞", "edit_status_select", "inactive")
		BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

		menu.Inline(
			menu.Row(btnActive, btnInactive),
			menu.Row(BackBtn),
		)
		return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", menu)
	}

	return nil
}

func (h *Handler) onTextAdminEdit(c tele.Context, fsm *fsm.FSM) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return nil
	}
	if data["action"] == "edit_goal" && data["await_input"] == true && fsm.Current() == StateEditGoalWaitInput {
		goalID, _ := data["goalID"].(int)
		field, _ := data["edit_field"].(string)
		newValue := c.Text()

		var goal models.Goal
		if err := h.DB.First(&goal, goalID).Error; err != nil {
			log.Printf("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %v", err)
			h.resetFSM(c.Sender().ID)
			return c.Send("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		}

		switch field {
		case "title":
			if newValue == "" {
				return c.Send("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
			}
			goal.Title = newValue
		case "description":
			goal.Description = newValue
		case "target_sum":
			val, err := strconv.ParseFloat(newValue, 64)
			if err != nil || val <= 0 {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
			}
			goal.TargetSum = val
		}

		if err := h.DB.Save(&goal).Error; err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: %v", err)
			h.resetFSM(c.Sender().ID)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏.")
		}

		h.resetFSM(c.Sender().ID)
		back := &tele.ReplyMarkup{}
		BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
		back.Inline(back.Row(BackBtn))
		return c.Send("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
	}
	return nil
}

func (h *Handler) onEditPrioritySelect(c tele.Context) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return c.Send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
	}
	goalID, _ := data["goalID"].(int)
	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		log.Printf("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	priority := c.Callback().Data
	goal.Priority = priority
	if err := h.DB.Save(&goal).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", ShowAlert: true})
	}
	h.resetFSM(c.Sender().ID)

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))
	return c.Edit("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
}

func (h *Handler) onEditStatusSelect(c tele.Context) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return c.Send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
	}
	goalID, _ := data["goalID"].(int)
	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		log.Printf("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	status := c.Callback().Data
	goal.Status = status
	if err := h.DB.Save(&goal).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", ShowAlert: true})
	}
	h.resetFSM(c.Sender().ID)

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))
	return c.Edit("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
func (h *Handler) onDeleteGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	menu := &tele.ReplyMarkup{}
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	if len(goals) == 0 {
		menu.Inline(menu.Row(BackBtn))
		return c.Send("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", menu)
	}

	rows := []tele.Row{}
	for _, g := range goals {
		btn := menu.Data(fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å: %s (ID:%d)", g.Title, g.ID), "delete_goal_confirm", strconv.Itoa(int(g.ID)))
		rows = append(rows, menu.Row(btn))
	}
	menu.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", menu)
}

func (h *Handler) onDeleteGoalConfirm(c tele.Context) error {
	goalIDStr := c.Callback().Data
	goalID, err := strconv.Atoi(goalIDStr)
	if err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ü–µ–ª–∏", ShowAlert: true})
	}

	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	if err := h.DB.Delete(&goal).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: %v", err)
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", ShowAlert: true})
	}
	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))
	return c.Edit("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
}

// // –ü–µ—Ä–µ—Å—á—ë—Ç —Å—É–º–º –ø–æ —Ü–µ–ª—è–º
// func (h *Handler) onRecalcAllGoals(c tele.Context) error {
// 	var goals []models.Goal
// 	if err := h.DB.Find(&goals).Error; err != nil {
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π: %v", err)
// 		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
// 	}

// 	for _, g := range goals {
// 		if err := h.recalculateGoalCurrentSum(g.ID); err != nil {
// 			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ —Ü–µ–ª–∏ %d: %v", g.ID, err)
// 		}
// 	}
// 	back := &tele.ReplyMarkup{}
// 	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
// 	back.Inline(back.Row(BackBtn))
// 	return c.Send("‚úÖ –í—Å–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.", back)
// }

// func (h *Handler) recalculateGoalCurrentSum(goalID uint) error {
// 	var total float64
// 	if err := h.DB.Model(&models.Donation{}).Where("goal_id = ?", goalID).Select("COALESCE(SUM(amount),0)").Scan(&total).Error; err != nil {
// 		return err
// 	}
// 	return h.DB.Model(&models.Goal{}).Where("id = ?", goalID).Update("current_sum", total).Error
// }
