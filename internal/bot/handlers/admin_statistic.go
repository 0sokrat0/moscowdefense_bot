package handlers

import (
	"TgDonation/internal/database/models"
	"fmt"
	tele "gopkg.in/telebot.v4"
	"gorm.io/gorm"
	"log"
)

func (h *Handler) onStatistic(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	// ---- –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ----
	var totalDonations float64
	var donationsCount int64

	// 1) –°—É–º–º–∞ –∏ –∫–æ–ª-–≤–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
	if err := h.DB.Model(&models.Donation{}).
		Select("COALESCE(SUM(amount),0)").
		Scan(&totalDonations).Error; err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—É–º–º–∞).")
	}
	if err := h.DB.Model(&models.Donation{}).Count(&donationsCount).Error; err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–æ–ª-–≤–æ).")
	}

	// 2) –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
	var avgDonation float64
	if donationsCount > 0 {
		avgDonation = totalDonations / float64(donationsCount)
	}

	// 3) –°–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ
	var activeGoalsCount int64
	if err := h.DB.Model(&models.Goal{}).
		Where("status = ?", "active").
		Count(&activeGoalsCount).Error; err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ü–µ–ª–∏).")
	}

	// 4) –¢–æ–ø —Ü–µ–ª—å (–ø–æ TargetSum)
	var topGoal models.Goal
	if err := h.DB.Order("target_sum DESC").First(&topGoal).Error; err == nil {
		// –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–ª—å, err –±—É–¥–µ—Ç nil, –∏–Ω–∞—á–µ - record not found
	}

	var totalDonation models.TotalDonation
	err := h.DB.First(&totalDonation).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ 0
			totalDonation.Total = 0
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TotalDonation: %v", err)
			return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–ø–∏–ª–∫–∏.")
		}
	}
	total := totalDonation.Total

	// ---- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ----

	// (A) –ß–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤
	var uniqueDonorsCount int64
	if err := h.DB.Model(&models.Donation{}).
		Distinct("user_id").
		Count(&uniqueDonorsCount).Error; err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–Ω–æ—Ä—ã).")
	}

	// (B) –¢–æ–ø-–¥–æ–Ω–æ—Ä (–∫—Ç–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ –≤—Å–µ—Ö)
	type DonorStat struct {
		UserID int
		Total  float64
	}
	var topDonor DonorStat
	if err := h.DB.Model(&models.Donation{}).
		Select("user_id, SUM(amount) as total").
		Group("user_id").
		Order("total DESC").
		Limit(1).
		Scan(&topDonor).Error; err != nil {
		// –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–Ω–∞—Ç–æ–≤ ‚Äî –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
	}

	var topDonorUser models.User
	if topDonor.UserID != 0 {
		_ = h.DB.First(&topDonorUser, topDonor.UserID)
	}

	// (C) –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–Ω–∫–∞–º
	type BankStat struct {
		BankName string
		Total    float64
	}
	var bankStats []BankStat
	if err := h.DB.Model(&models.Donation{}).
		Select("bank_name as bank_name, SUM(amount) as total").
		Group("bank_name").
		Scan(&bankStats).Error; err != nil {
		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
	}

	// ---- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç ----
	report := "<b>üìä <u>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</u></b>\n\n"
	// 1) –û–±—â–∏–µ
	report += fmt.Sprintf("üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π:</b> %s ‚ÇΩ\n", formatFloatNoTrailingZeros(totalDonations))
	report += fmt.Sprintf("üí≥ <b>–ë–∞–ª–∞–Ω—Å –ö–æ–ø–∏–ª–∫–∏:</b> %s ‚ÇΩ\n", formatFloatNoTrailingZeros(total))
	report += fmt.Sprintf("üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π:</b> %d\n", donationsCount)
	report += fmt.Sprintf("üí≤ <b>–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b> %s ‚ÇΩ\n", formatFloatNoTrailingZeros(avgDonation))
	report += fmt.Sprintf("üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π:</b> %d\n\n", activeGoalsCount)

	// 2) –¢–æ–ø —Ü–µ–ª—å
	if topGoal.ID != 0 {
		report += fmt.Sprintf(
			"üèÜ <b>–¢–æ–ø —Ü–µ–ª—å –ø–æ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ:</b> %s\n   üéØ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: %s ‚ÇΩ\n\n",
			topGoal.Title,
			formatFloatNoTrailingZeros(topGoal.TargetSum),
		)
	} else {
		report += "üèÜ <b>–¢–æ–ø —Ü–µ–ª—å:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
	}

	// 3) –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–Ω–æ—Ä—ã
	report += fmt.Sprintf("üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤:</b> %d\n", uniqueDonorsCount)

	// 4) –¢–æ–ø-–¥–æ–Ω–æ—Ä
	if topDonor.UserID != 0 {
		donorName := topDonorUser.Username
		if donorName == "" {
			donorName = fmt.Sprintf("UserID:%d", topDonorUser.TgID)
		}
		report += fmt.Sprintf("ü§ù <b>–¢–æ–ø-–¥–æ–Ω–æ—Ä:</b> %s (–°—É–º–º–∞: %s ‚ÇΩ)\n\n", donorName, formatFloatNoTrailingZeros(topDonor.Total))
	} else {
		report += "ü§ù <b>–¢–æ–ø-–¥–æ–Ω–æ—Ä:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
	}

	// 5) –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–Ω–∫–∞–º
	if len(bankStats) > 0 {
		report += "<b>üè¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–Ω–∫–∞–º:</b>\n"
		for _, bs := range bankStats {
			report += fmt.Sprintf(" - %s: %s ‚ÇΩ\n", bs.BankName, formatFloatNoTrailingZeros(bs.Total))
		}
		report += "\n"
	}

	// –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
	back := backButton("back_to_panel")
	return c.Send(report, back, tele.ModeHTML)
}
