package handlers

import (
	"fmt"
	"gorm.io/gorm"
	"log"
	"strings"

	"TgDonation/internal/database/models"
	tele "gopkg.in/telebot.v4"
)

func getPriorityInRussian(priority string) string {
	switch strings.ToLower(priority) {
	case "high":
		return "–í—ã—Å–æ–∫–∏–π"
	case "medium":
		return "–°—Ä–µ–¥–Ω–∏–π"
	case "low":
		return "–ù–∏–∑–∫–∏–π"
	default:
		return priority // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–±–∏—Ä–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
func formatFloatNoTrailingZeros(f float64) string {
	s := fmt.Sprintf("%.2f", f)
	s = strings.TrimRight(s, "0")
	s = strings.TrimRight(s, ".")
	return s
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
func (h *Handler) onGoal(c tele.Context) error {
	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ Callback)
	if c.Callback() != nil {
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}

	// 1) –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ TotalDonation
	var totalRec models.TotalDonation
	err := h.DB.First(&totalRec).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
			totalRec = models.TotalDonation{
				Total: 0,
			}
			if err := h.DB.Create(&totalRec).Error; err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ TotalDonation: %v", err)
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
			}
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TotalDonation: %v", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
		}
	}

	// 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
	var goals []models.Goal
	if err := h.DB.Where("status = ?", "active").Find(&goals).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π.")
	}

	// 3) –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª)
	menu := &tele.ReplyMarkup{}
	btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	menu.Inline(menu.Row(btnBack))

	// 4) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	// –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
	message := fmt.Sprintf(
		"<b>üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ–µ–≤–æ–π –∫–æ–ø–∏–ª–∫–∏:</b> %s ‚ÇΩ\n",
		formatFloatNoTrailingZeros(totalRec.Total),
	)
	message += "--------------------------------\n"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
	if len(goals) == 0 {
		message += "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</b> –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n"
	} else {
		message += "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</b>\n\n"
		for i, g := range goals {
			message += fmt.Sprintf(
				"%d. <b>%s</b> (ID: %d)\n   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n   üéØ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: %s ‚ÇΩ\n   üî∫ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s\n\n",
				i+1,
				g.Title,
				g.ID,
				g.Description,
				formatFloatNoTrailingZeros(g.TargetSum),
				getPriorityInRussian(g.Priority), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
			)
		}
	}

	// 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
	return c.Send(message, &tele.SendOptions{
		ParseMode:   tele.ModeHTML,
		ReplyMarkup: menu,
	})
}

func (h *Handler) onGoalCommand(c tele.Context) error {
	// 1) –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ TotalDonation
	var totalRec models.TotalDonation
	err := h.DB.First(&totalRec).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
			totalRec = models.TotalDonation{
				Total: 0,
			}
			if err := h.DB.Create(&totalRec).Error; err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ TotalDonation: %v", err)
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
			}
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TotalDonation: %v", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
		}
	}

	// 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
	var goals []models.Goal
	if err := h.DB.Where("status = ?", "active").Find(&goals).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π.")
	}

	// 3) –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª)
	menu := &tele.ReplyMarkup{}
	btnBack := menu.URL("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç", "https://t.me/moscowdefense_bot?start")
	menu.Inline(menu.Row(btnBack))

	// 4) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf(
		"<b>üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ–µ–≤–æ–π –∫–æ–ø–∏–ª–∫–∏:</b> %s ‚ÇΩ\n",
		formatFloatNoTrailingZeros(totalRec.Total),
	)
	message += "--------------------------------\n"

	if len(goals) == 0 {
		message += "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</b> –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n"
	} else {
		message += "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</b>\n\n"
		for i, g := range goals {
			message += fmt.Sprintf(
				"%d. <b>%s</b>\n   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n   üéØ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: %s ‚ÇΩ\n   üî∫ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s\n\n",
				i+1,
				g.Title,
				g.Description,
				formatFloatNoTrailingZeros(g.TargetSum),
				getPriorityInRussian(g.Priority),
			)
		}
	}

	// 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
	return c.Send(message, &tele.SendOptions{
		ParseMode:   tele.ModeHTML,
		ReplyMarkup: menu,
	})
}
