package handlers

import (
	"TgDonation/internal/database/models"
	"context"
	"log"
	"strconv"

	tele "gopkg.in/telebot.v4"
)

const (
	StateStart       = "start"
	StateSelectBank  = "bank"
	StateEnterAmount = "amount"
	StateFinish      = "finish"
)

type FSM interface {
	Event(ctx context.Context, event string) error
	Current() string
	SetState(state string)
}

func (h *Handler) onDonation(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	if err := deleteMessage(c); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	if err := fsm.Event(ctx, StateSelectBank); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ '–°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ'.")
	}

	menu := createBankMenu()
	return c.Send("<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>", menu)
}

func (h *Handler) onBankDetails(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	if err := deleteMessage(c); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	if fsm.Current() != StateSelectBank {
		h.resetFSM(c.Sender().ID)
		return c.Send("–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	h.UserData[c.Sender().ID] = ensureUserData(h.UserData[c.Sender().ID])
	selectedBank := c.Callback().Data
	bankDetails, valid := getBankDetails(selectedBank)
	if !valid {
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	h.UserData[c.Sender().ID]["bank"] = bankDetails.BankName
	if err := fsm.Event(ctx, StateEnterAmount); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	log.Printf("User %d selected bank: %s", c.Sender().ID, selectedBank)
	return c.Send(bankDetails.Details + "\n\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>")
}

func (h *Handler) onEnterAmount(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	if fsm.Current() != StateEnterAmount {
		h.resetFSM(c.Sender().ID)
		return c.Send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É —Å–µ–π—á–∞—Å. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	reaction := tele.Reaction{
		Type:  "emoji",
		Emoji: "üëå",
	}

	reactions := tele.Reactions{
		Reactions: []tele.Reaction{reaction},
		Big:       false,
	}

	if err := c.Bot().React(c.Sender(), c.Message(), reactions); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.")
	}

	h.UserData[c.Sender().ID] = ensureUserData(h.UserData[c.Sender().ID])
	h.UserData[c.Sender().ID]["amount"] = c.Text()
	log.Printf("User %d entered amount: %s", c.Sender().ID, c.Text())
	return c.Send("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>")
}

func (h *Handler) onUploadReceipt(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	if fsm.Current() != StateEnterAmount {
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ —Å–µ–π—á–∞—Å. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	if c.Message().Photo == nil {
		return c.Send("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.</b>")
	}

	if _, err := createDonation(h, c); err != nil {
		log.Printf("Error saving donation: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
	}

	if err := fsm.Event(ctx, StateFinish); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	reaction := tele.Reaction{
		Type:  "emoji",
		Emoji: "ü§ù",
	}

	reactions := tele.Reactions{
		Reactions: []tele.Reaction{reaction},
		Big:       false,
	}

	if err := c.Bot().React(c.Sender(), c.Message(), reactions); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.")
	}

	h.deleteAllMessages(c)
	h.resetFSM(c.Sender().ID)

	menu := &tele.ReplyMarkup{}
	btnMainBack := menu.Data("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	menu.Inline(menu.Row(btnMainBack))

	return c.Send("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–∂–Ω–∞.</b>", menu)
}

func (h *Handler) resetFSM(userID int64) {
	log.Printf("Resetting FSM for User %d", userID)
	if h.UserFSM[userID] != nil {
		h.UserFSM[userID].SetState(StateStart)
	}
	delete(h.UserData, userID)
}

// Utility functions
func deleteMessage(c tele.Context) error {
	if c.Callback().Message != nil {
		return c.Bot().Delete(c.Callback().Message)
	}
	return nil
}

func (h *Handler) deleteAllMessages(c tele.Context) {
	if msgs, ok := h.UserData[c.Sender().ID]["messages"].([]*tele.Message); ok {
		for _, msg := range msgs {
			if err := c.Bot().Delete(msg); err != nil {
				log.Printf("Error deleting message: %v", err)
			}
		}
		h.UserData[c.Sender().ID]["messages"] = []*tele.Message{}
	} else {
		log.Printf("No messages found for user %d", c.Sender().ID)
	}
}

func (h *Handler) onMainMenu(c tele.Context) error {
	h.resetFSM(c.Sender().ID)
	if err := c.Bot().Delete(c.Callback().Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	return h.onStart(c)
}

type BankDetails struct {
	BankName string
	Details  string
}

func getBankDetails(bank string) (BankDetails, bool) {
	switch bank {
	case "sber":
		return BankDetails{
			BankName: "–°–±–µ—Ä–±–∞–Ω–∫",
			Details:  "üü¢ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞:</b>\n–ö–∞—Ä—Ç–∞:<code> 2202 2080 3701 1005</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ.–ù",
		}, true
	case "vtb":
		return BankDetails{
			BankName: "–í–¢–ë",
			Details:  "üîµ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –í–¢–ë:</b>\n–ö–∞—Ä—Ç–∞:<code> 2200 2402 1368 9108</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ.–ù",
		}, true
	case "sbp":
		return BankDetails{
			BankName: "–°–ë–ü",
			Details:  "üí† <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–ë–ü:</b>\n–¢–µ–ª–µ—Ñ–æ–Ω:<code> +7 963 752-92-99</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ.–ù",
		}, true
	default:
		return BankDetails{}, false
	}
}

func ensureUserData(data map[string]interface{}) map[string]interface{} {
	if data == nil {
		return make(map[string]interface{})
	}
	return data
}

func createBankMenu() *tele.ReplyMarkup {
	menu := &tele.ReplyMarkup{}
	btnSber := menu.Data("üü¢ –°–±–µ—Ä–±–∞–Ω–∫", "sber", "sber")
	btnVTB := menu.Data("üîµ –í–¢–ë", "vtb", "vtb")
	btnSBP := menu.Data("üí† –°–ë–ü", "sbp", "sbp")

	menu.Inline(
		menu.Row(btnSber, btnVTB, btnSBP),
	)
	return menu
}

func createDonation(h *Handler, c tele.Context) (models.Donation, error) {
	photo := c.Message().Photo
	fileID := photo.FileID

	var user models.User
	if err := h.DB.FirstOrCreate(&user, models.User{TgID: c.Sender().ID}).Error; err != nil {
		return models.Donation{}, err
	}

	bank, _ := h.UserData[c.Sender().ID]["bank"].(string)
	amountStr, _ := h.UserData[c.Sender().ID]["amount"].(string)
	amount, err := strconv.Atoi(amountStr)
	if err != nil {
		return models.Donation{}, err
	}

	donation := models.Donation{
		UserID:       user.ID,
		BankName:     bank,
		Amount:       float64(amount),
		ReceiptPhoto: fileID,
	}

	if err := h.DB.Create(&donation).Error; err != nil {
		return models.Donation{}, err
	}

	var total models.TotalDonation
	h.DB.Find(&total)
	total.Total += donation.Amount

	if err := h.DB.Save(&total).Error; err != nil {
		return models.Donation{}, err
	}

	return donation, nil
}
