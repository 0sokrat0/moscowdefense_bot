package handlers

import (
	"TgDonation/internal/database/models"
	"context"
	tele "gopkg.in/telebot.v4"
	"log"
	"strconv"
)

const (
	StateStart       = "start"
	StateSelectBank  = "bank"
	StateEnterAmount = "amount"
	StateFinish      = "finish"
)

func (h *Handler) onDonation(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	if err := c.Bot().Delete(c.Callback().Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	if err := fsm.Event(ctx, "bank"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ '–°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ'.")
	}

	menu := &tele.ReplyMarkup{}
	btnSber := menu.Data("üü¢ –°–±–µ—Ä–±–∞–Ω–∫", "sber", "sber")
	btnVTB := menu.Data("üîµ –í–¢–ë", "vtb", "vtb")
	btnSBP := menu.Data("üí† –°–ë–ü", "sbp", "sbp")

	menu.Inline(
		menu.Row(btnSber, btnVTB, btnSBP),
	)

	return c.Send("<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>", menu)
}

func (h *Handler) onBankDetails(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	if err := c.Bot().Delete(c.Callback().Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	log.Printf("FSM Current State (Before Event) for User %d: %s", c.Sender().ID, fsm.Current())

	if fsm.Current() != StateSelectBank {
		h.resetFSM(c.Sender().ID)
		return c.Send("–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	if h.UserData[c.Sender().ID] == nil {
		h.UserData[c.Sender().ID] = make(map[string]interface{})
	}

	selectedBank := c.Callback().Data
	var bankDetails string
	switch selectedBank {
	case "sber":
		h.UserData[c.Sender().ID]["bank"] = "–°–±–µ—Ä–±–∞–Ω–∫"
		bankDetails = "üü¢ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞:</b>\n–ö–∞—Ä—Ç–∞:<code> 2202 2080 3701 1005</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ–ª–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞"
	case "vtb":
		h.UserData[c.Sender().ID]["bank"] = "–í–¢–ë"
		bankDetails = "üîµ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –í–¢–ë:</b>\n–ö–∞—Ä—Ç–∞:<code> 2200 2402 1368 9108</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ–ª–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞"
	case "sbp":
		h.UserData[c.Sender().ID]["bank"] = "–°–ë–ü"
		bankDetails = "üí† <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–ë–ü:</b>\n–¢–µ–ª–µ—Ñ–æ–Ω:<code> +7 963 752-92-99</code>\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –õ—É–∫–∏—á—ë–≤–∞ –Æ–ª–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞"
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	if err := fsm.Event(ctx, "amount"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	log.Printf("User %d selected bank: %s", c.Sender().ID, selectedBank)

	return c.Send(bankDetails + "\n\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>")
}

func (h *Handler) onEnterAmount(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)

	log.Printf("FSM Current State for User %d: %s", c.Sender().ID, fsm.Current())

	if fsm.Current() != StateEnterAmount {
		h.resetFSM(c.Sender().ID)
		return c.Send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É —Å–µ–π—á–∞—Å. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	if h.UserData[c.Sender().ID] == nil {
		h.UserData[c.Sender().ID] = make(map[string]interface{})
	}
	h.UserData[c.Sender().ID]["amount"] = c.Text()

	log.Printf("User %d entered amount: %s", c.Sender().ID, c.Text())

	return c.Send("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>")
}

func (h *Handler) onUploadReceipt(c tele.Context) error {
	fsm := h.getOrCreateFSM(c.Sender().ID)
	ctx := context.Background()

	back := &tele.ReplyMarkup{}
	btnBack := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")

	back.Inline(
		back.Row(btnBack),
	)

	log.Printf("FSM Current State for User %d: %s", c.Sender().ID, fsm.Current())

	if fsm.Current() != StateEnterAmount {
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ —Å–µ–π—á–∞—Å. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	if c.Message().Photo == nil {
		return c.Send("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.</b>")
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ (Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏)
	photo := c.Message().Photo
	fileID := photo.FileID

	var user models.User
	if err := h.DB.FirstOrCreate(&user, models.User{TgID: c.Sender().ID}).Error; err != nil {
		log.Printf("Database Error (User): %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserData
	bank, bankExists := h.UserData[c.Sender().ID]["bank"]
	if !bankExists {
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	amountStr, amountExists := h.UserData[c.Sender().ID]["amount"].(string)
	if !amountExists {
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ
	amount, err := strconv.Atoi(amountStr)
	if err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	donation := models.Donation{
		UserID:       user.ID,
		BankName:     bank.(string),
		Amount:       float64(amount),
		ReceiptPhoto: fileID, // –°–æ—Ö—Ä–∞–Ω—è–µ–º FileID —Ñ–æ—Ç–æ
	}

	if err := h.DB.Create(&donation).Error; err != nil {
		log.Printf("Database Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
	}

	// –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
	if err := fsm.Event(ctx, "finish"); err != nil {
		log.Printf("FSM Event Error: %v", err)
		h.resetFSM(c.Sender().ID)
		return c.Send("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>")
	}

	// –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ FSM
	delete(h.UserData, c.Sender().ID)
	delete(h.UserFSM, c.Sender().ID)

	return c.Send("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–∂–Ω–∞.</b>", back)
}

func (h *Handler) resetFSM(userID int64) {
	log.Printf("Resetting FSM for User %d", userID)
	if h.UserFSM[userID] != nil {
		h.UserFSM[userID].SetState(StateStart)
	}
	delete(h.UserData, userID)
}
