package handlers

import (
	"TgDonation/internal/database/models"
	"log"

	tele "gopkg.in/telebot.v4"
	"gorm.io/gorm"
)

func NewHandler(db *gorm.DB) *Handler {
	return &Handler{
		DB:                db,
		UserAlbumMessages: make(map[int64][]*tele.Message),
	}
}

func (h *Handler) onInfo(c tele.Context) error {
	if err := c.Bot().Delete(c.Callback().Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	menu := &tele.ReplyMarkup{}
	btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "backAlbum")
	menu.Inline(menu.Row(btnBack))

	photoPaths := []string{
		"pkg/img/photo_1.jpg",
		"pkg/img/photo_2.jpg",
		"pkg/img/photo_3.jpg",
		"pkg/img/photo_4.jpg",
		"pkg/img/photo_10.jpg",
	}

	fileIDs, err := h.uploadPhotos(c, photoPaths)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: %v", err)
		return err
	}

	if err := h.sendAlbumByIDs(c, fileIDs); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: %v", err)
		return err
	}

	text := `<b>–û –Ω–∞—Å:</b>
¬´–ú–∞—Ä—Ñ–∏–Ω—Å–∫–∏–π –¢—ã–ª¬ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–π—Ü–æ–≤ –∏–∑ 108-–π –≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π –¥–µ—Å–∞–Ω—Ç–Ω–æ-—à—Ç—É—Ä–º–æ–≤–æ–π –ö—É–±–∞–Ω—Å–∫–∏–π –∫–∞–∑–∞—á–∏–π –æ—Ä–¥–µ–Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ó–≤–µ–∑–¥—ã –ø–æ–ª–∫ (108 –≥–≤. –¥—à–ø).
–î–ª—è –±–æ–π—Ü–æ–≤ –º—ã —è–≤–ª—è–µ–º—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º —Ç—ã–ª–æ–º –∏ –æ–ø–æ—Ä–æ–π. –ü—Ä–æ—à—É –≤—Å–µ—Ö –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã—Ö –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ–¥–Ω–æ –Ω–æ–≥—É ‚úä
–°–ª–∞–≤–∞ –†–æ—Å—Å–∏–∏ üá∑üá∫

–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å—Ç–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–º —Ç—ã–ª–æ–º –∏ –æ–ø–æ—Ä–æ–π –¥–ª—è –≥–µ—Ä–æ–µ–≤.
<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ!</b>`

	if err := c.Send(text, menu); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: %v", err)
		return err
	}

	return nil
}

func (h *Handler) uploadPhotos(c tele.Context, photoPaths []string) ([]string, error) {
	fileIDs := []string{}

	for _, path := range photoPaths {
		fileID, found, err := models.GetFileID(h.DB, path)
		if err != nil {
			return nil, err
		}

		if found {
			fileIDs = append(fileIDs, fileID)
			continue
		}

		photo := &tele.Photo{File: tele.FromDisk(path)}
		msg, err := c.Bot().Send(c.Chat(), photo)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ %s: %v", path, err)
			return nil, err
		}

		if err := models.SaveFileID(h.DB, path, msg.Photo.FileID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –¥–ª—è —Ñ–æ—Ç–æ %s: %v", path, err)
			return nil, err
		}

		fileIDs = append(fileIDs, msg.Photo.FileID)
	}

	return fileIDs, nil
}

func (h *Handler) sendAlbumByIDs(c tele.Context, fileIDs []string) error {
	album := tele.Album{}

	for _, fileID := range fileIDs {
		album = append(album, &tele.Photo{File: tele.File{FileID: fileID}})
	}

	msgs, err := c.Bot().SendAlbum(c.Chat(), album)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: %v", err)
		return err
	}

	msgPtrs := make([]*tele.Message, len(msgs))
	for i := range msgs {
		msgPtrs[i] = &msgs[i]
	}

	if h.UserAlbumMessages == nil {
		h.UserAlbumMessages = make(map[int64][]*tele.Message)
	}

	h.UserAlbumMessages[c.Sender().ID] = msgPtrs

	return nil
}

func (h *Handler) onBackAlbum(c tele.Context) error {
	// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := c.Bot().Delete(c.Callback().Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID := c.Sender().ID

	// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if msgs, ok := h.UserAlbumMessages[userID]; ok {
		ch := make(chan error, len(msgs)) // –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫
		for _, msg := range msgs {
			go func(m *tele.Message) {
				if err := c.Bot().Delete(m); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞: %v", err)
					ch <- err
				} else {
					ch <- nil
				}
			}(msg)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è
		for range msgs {
			if err := <-ch; err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞: %v", err)
			}
		}

		// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–ª—å–±–æ–º–∞
		delete(h.UserAlbumMessages, userID)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
	return h.onStart(c)
}
