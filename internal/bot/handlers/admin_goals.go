package handlers

import (
	"context"
	"fmt"
	"github.com/looplab/fsm"
	"strconv"

	"TgDonation/internal/database/models"
	tele "gopkg.in/telebot.v4"
)

// –ú–µ–Ω—é ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏¬ª
func (h *Handler) onGoalsPanel(c tele.Context) error {
	h.tryDeleteMessage(c)
	menu := &tele.ReplyMarkup{}
	AddGoal := menu.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", "add_goal")
	ListGoal := menu.Data("üìú –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π", "list_goal")
	EditGoal := menu.Data("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å", "edit_goal")
	DeleteGoal := menu.Data("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", "delete_goal")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	menu.Inline(
		menu.Row(AddGoal, ListGoal),
		menu.Row(EditGoal, DeleteGoal),
		menu.Row(BackBtn),
	)

	return c.Send("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:", menu)
}

// ------------------------ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å ------------------------

func (h *Handler) AddGoalHandler(c tele.Context) error {
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	h.resetFSM(c.Sender().ID)
	fsmObj := h.getOrCreateAdminFSM(c.Sender().ID)
	h.UserData[c.Sender().ID] = map[string]interface{}{
		"action": "add_goal",
		"mode":   "admin",
	}

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "add_goal_title"
	if err := fsmObj.Event(context.Background(), "add_goal_title"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ FSM. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
	}

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
}

func (h *Handler) processGoalTitle(c tele.Context, fsmObj *fsm.FSM) error {
	title := c.Text()
	if title == "" {
		return c.Send("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
	}
	h.UserData[c.Sender().ID]["title"] = title

	if err := fsmObj.Event(context.Background(), "add_goal_description"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ FSM. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
}

func (h *Handler) processGoalDescription(c tele.Context, fsmObj *fsm.FSM) error {
	description := c.Text()
	if description == "" {
		return c.Send("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
	}
	h.UserData[c.Sender().ID]["description"] = description

	if err := fsmObj.Event(context.Background(), "add_goal_target_sum"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ FSM. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):")
}

func (h *Handler) processGoalTargetSum(c tele.Context, fsmObj *fsm.FSM) error {
	targetSum, err := strconv.ParseFloat(c.Text(), 64)
	if err != nil || targetSum <= 0 {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
	}
	h.UserData[c.Sender().ID]["target_sum"] = targetSum

	// –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
	menu := &tele.ReplyMarkup{}
	btnLow := menu.Data("üîµ –ù–∏–∑–∫–∏–π", "priority_low", "low")
	btnMedium := menu.Data("üü† –°—Ä–µ–¥–Ω–∏–π", "priority_medium", "medium")
	btnHigh := menu.Data("üî¥ –í—ã—Å–æ–∫–∏–π", "priority_high", "high")
	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	menu.Inline(
		menu.Row(btnLow, btnMedium, btnHigh),
		menu.Row(BackBtn),
	)

	if err := fsmObj.Event(context.Background(), "finish_goal"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ FSM. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
	}
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏:", menu)
}

func (h *Handler) SetPriorityHandler(c tele.Context) error {
	action, ok := h.UserData[c.Sender().ID]["action"]
	if !ok || action != "add_goal" {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	priority := c.Callback().Data
	if priority != "low" && priority != "medium" && priority != "high" {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.")
	}

	h.UserData[c.Sender().ID]["priority"] = priority

	// –°–æ–∑–¥–∞—ë–º —Ü–µ–ª—å –≤ –ë–î
	title, _ := h.UserData[c.Sender().ID]["title"].(string)
	description, _ := h.UserData[c.Sender().ID]["description"].(string)
	targetSum, _ := h.UserData[c.Sender().ID]["target_sum"].(float64)

	goal := models.Goal{
		Title:       title,
		Description: description,
		TargetSum:   targetSum,
		Status:      "active",
		Priority:    priority,
		AdminID:     uint(c.Sender().ID),
	}

	if err := h.DB.Create(&goal).Error; err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –ó–∞–≤–µ—Ä—à–∞–µ–º
	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))

	delete(h.UserData, c.Sender().ID)
	h.resetFSM(c.Sender().ID)

	return c.Send("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", back)
}

// ------------------------ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π ------------------------

func (h *Handler) onListGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")
	back.Inline(back.Row(BackBtn))

	if len(goals) == 0 {
		return c.Send("–¶–µ–ª–µ–π –Ω–µ—Ç.", back)
	}

	message := "üéØ <b>–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π:</b>\n\n"
	for i, g := range goals {
		message += fmt.Sprintf(
			"%d. <b>%s</b>\nID: %d\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: %.2f\n–°—Ç–∞—Ç—É—Å: %s\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s\n\n",
			i+1, g.Title, g.ID, g.Description, g.TargetSum, g.Status, g.Priority,
		)
	}

	return c.Send(message, back, tele.ModeHTML)
}

// ------------------------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ ------------------------

func (h *Handler) onEditGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	h.resetFSM(c.Sender().ID)
	fsmObj := h.getOrCreateAdminFSM(c.Sender().ID)
	h.UserData[c.Sender().ID] = map[string]interface{}{
		"mode":   "admin",
		"action": "edit_goal",
	}

	if err := fsmObj.Event(context.Background(), "go_edit_goal_select"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	if len(goals) == 0 {
		back.Inline(back.Row(BackBtn))
		return c.Send("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", back)
	}

	menu := &tele.ReplyMarkup{}
	rows := []tele.Row{}
	for _, g := range goals {
		btn := menu.Data(
			fmt.Sprintf("%s (ID:%d)", g.Title, g.ID),
			"edit_goal_select",
			strconv.Itoa(int(g.ID)),
		)
		rows = append(rows, menu.Row(btn))
	}
	menu.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", menu)
}

func (h *Handler) onEditGoalSelect(c tele.Context) error {
	goalIDStr := c.Callback().Data
	goalID, err := strconv.Atoi(goalIDStr)
	if err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ü–µ–ª–∏", ShowAlert: true})
	}

	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	adminFSM := h.getOrCreateAdminFSM(c.Sender().ID)
	if err := adminFSM.Event(context.Background(), "go_edit_goal_field"); err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.")
	}

	h.UserData[c.Sender().ID]["goalID"] = goalID

	menu := &tele.ReplyMarkup{}
	btnTitle := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "edit_field", "title")
	btnDesc := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "edit_field", "description")
	btnSum := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É", "edit_field", "target_sum")
	btnPriority := menu.Data("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "edit_field", "priority")

	// –í–º–µ—Å—Ç–æ "–ê–∫—Ç–∏–≤–Ω–∞/–ù–µ–∞–∫—Ç–∏–≤–Ω–∞" ‚Äî –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å"
	btnFinish := menu.Data("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å", "edit_status_select", "finished")

	BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	menu.Inline(
		menu.Row(btnTitle),
		menu.Row(btnDesc),
		menu.Row(btnSum),
		menu.Row(btnPriority),
		menu.Row(btnFinish),
		menu.Row(BackBtn),
	)

	return c.Edit(
		fmt.Sprintf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: <b>%s</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", goal.Title),
		menu,
		tele.ModeHTML,
	)
}

// –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å AllocatedSum –≤—Ä—É—á–Ω—É—é (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ)
func (h *Handler) onEditAllocatedSum(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	_, ok := h.UserData[c.Sender().ID]["goalID"].(int)
	if !ok {
		return c.Send("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
	}

	h.UserData[c.Sender().ID]["await_input"] = true
	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ü–µ–ª–∏:")
}

func (h *Handler) processAllocatedSum(c tele.Context) error {
	if h.UserData[c.Sender().ID]["await_input"] != true {
		return c.Send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã.")
	}

	goalID, ok := h.UserData[c.Sender().ID]["goalID"].(int)
	if !ok {
		return c.Send("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
	}

	allocatedSumStr := c.Text()
	allocatedSum, err := strconv.ParseFloat(allocatedSumStr, 64)
	if err != nil || allocatedSum < 0 {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
	}

	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		return c.Send("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
	}

	if err := h.DB.Save(&goal).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏.")
	}

	h.UserData[c.Sender().ID]["await_input"] = false
	return c.Send("‚úÖ –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", backButton("back_to_panel"))
}

// –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *Handler) onEditField(c tele.Context) error {
	field := c.Callback().Data
	h.UserData[c.Sender().ID]["edit_field"] = field

	adminFSM := h.getOrCreateAdminFSM(c.Sender().ID)

	if field == "title" || field == "description" || field == "target_sum" {
		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
		if err := adminFSM.Event(context.Background(), "wait_input"); err != nil {
			h.resetFSM(c.Sender().ID)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
		h.UserData[c.Sender().ID]["await_input"] = true
		return c.Respond(&tele.CallbackResponse{Text: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∞—Ç"})
	}

	if field == "priority" {
		menu := &tele.ReplyMarkup{}
		btnLow := menu.Data("üîµ –ù–∏–∑–∫–∏–π", "edit_priority_select", "low")
		btnMedium := menu.Data("üü† –°—Ä–µ–¥–Ω–∏–π", "edit_priority_select", "medium")
		btnHigh := menu.Data("üî¥ –í—ã—Å–æ–∫–∏–π", "edit_priority_select", "high")
		BackBtn := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

		menu.Inline(
			menu.Row(btnLow, btnMedium, btnHigh),
			menu.Row(BackBtn),
		)
		return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", menu)
	}

	// –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É –Ω–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "finished", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ onEditGoalSelect
	return nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (title, description, target_sum)
func (h *Handler) onTextAdminEdit(c tele.Context, fsm *fsm.FSM) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return nil
	}

	if data["action"] == "edit_goal" && data["await_input"] == true && fsm.Current() == StateEditGoalWaitInput {
		goalID, _ := data["goalID"].(int)
		field, _ := data["edit_field"].(string)
		newValue := c.Text()

		var goal models.Goal
		if err := h.DB.First(&goal, goalID).Error; err != nil {
			h.resetFSM(c.Sender().ID)
			return c.Send("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		}

		switch field {
		case "title":
			if newValue == "" {
				return c.Send("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
			}
			goal.Title = newValue
		case "description":
			if newValue == "" {
				return c.Send("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
			}
			goal.Description = newValue
		case "target_sum":
			val, err := strconv.ParseFloat(newValue, 64)
			if err != nil || val <= 0 {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
			}
			goal.TargetSum = val
		default:
			return c.Send("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		}

		if err := h.DB.Save(&goal).Error; err != nil {
			h.resetFSM(c.Sender().ID)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏.")
		}

		h.resetFSM(c.Sender().ID)
		return c.Send("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", backButton("back_to_panel"))
	}
	return nil
}

// –ú–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low / medium / high)
func (h *Handler) onEditPrioritySelect(c tele.Context) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return c.Send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
	}

	goalID, _ := data["goalID"].(int)
	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	priority := c.Callback().Data
	goal.Priority = priority
	if err := h.DB.Save(&goal).Error; err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", ShowAlert: true})
	}
	h.resetFSM(c.Sender().ID)

	return c.Edit("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", backButton("back_to_panel"))
}

// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ª—å (finished) –∏ –≤—ã—á–∏—Ç–∞–µ–º TargetSum
func (h *Handler) onEditStatusSelect(c tele.Context) error {
	data := h.UserData[c.Sender().ID]
	if data == nil {
		return c.Send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
	}
	goalID, _ := data["goalID"].(int)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	oldStatus := goal.Status
	newStatus := c.Callback().Data // –æ–∂–∏–¥–∞–µ–º "finished"

	// –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
	goal.Status = newStatus

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º
	if err := h.DB.Save(&goal).Error; err != nil {
		h.resetFSM(c.Sender().ID)
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", ShowAlert: true})
	}

	// –ï—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ finished ‚Äî –≤—ã—á–∏—Ç–∞–µ–º TargetSum –∏–∑ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
	if oldStatus != "finished" && newStatus == "finished" {
		// –°–ø–∏—Å—ã–≤–∞–µ–º
		if err := h.subtractFromTotalDonation(goal.TargetSum); err != nil {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–µ—Å—Ç—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
			goal.Status = oldStatus
			_ = h.DB.Save(&goal)

			h.resetFSM(c.Sender().ID)
			return c.Respond(&tele.CallbackResponse{
				Text:      "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏.",
				ShowAlert: true,
			})
		}
	}

	h.resetFSM(c.Sender().ID)
	return c.Edit("‚úÖ –¶–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", backButton("back_to_panel"))
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
func (h *Handler) onDeleteGoal(c tele.Context) error {
	h.tryDeleteMessage(c)
	if !h.isAdminFromDB(int(c.Sender().ID)) {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
	}

	var goals []models.Goal
	if err := h.DB.Where("deleted_at IS NULL").Find(&goals).Error; err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")
	}

	back := &tele.ReplyMarkup{}
	BackBtn := back.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_panel")

	if len(goals) == 0 {
		back.Inline(back.Row(BackBtn))
		return c.Send("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", back)
	}

	menu := &tele.ReplyMarkup{}
	rows := []tele.Row{}
	for _, g := range goals {
		btn := menu.Data(
			fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å: %s (ID:%d)", g.Title, g.ID),
			"delete_goal_confirm",
			strconv.Itoa(int(g.ID)),
		)
		rows = append(rows, menu.Row(btn))
	}
	menu.Inline(rows...)
	back.Inline(menu.Row(BackBtn))

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", menu)
}

func (h *Handler) onDeleteGoalConfirm(c tele.Context) error {
	goalIDStr := c.Callback().Data
	goalID, err := strconv.Atoi(goalIDStr)
	if err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ü–µ–ª–∏", ShowAlert: true})
	}

	var goal models.Goal
	if err := h.DB.First(&goal, goalID).Error; err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ShowAlert: true})
	}

	// –£–¥–∞–ª—è–µ–º (soft delete)
	if err := h.DB.Delete(&goal).Error; err != nil {
		return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", ShowAlert: true})
	}

	// –ò–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å: if err := h.DB.Unscoped().Delete(&goal).Error; ...

	return c.Edit("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", backButton("back_to_panel"))
}
